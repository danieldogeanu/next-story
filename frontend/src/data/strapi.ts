import qs from 'qs';
import type { Common } from '@strapi/strapi';
import { getAPIKey, getBackEndURL, getNodeEnv } from '@/utils/env';
import { APIResponseCollection } from '@/types/strapi';
import { HTTPMethod } from '@/types';

/**
 * Returns the Strapi endpoint URL based on the provided Strapi Content Type and HTTP method.
 *
 * @template T - The type of the Content Type, extending the Common.UID.ContentType type.
 * @param {T} contentType - The unique identifier of the content type generated by Strapi.
 * @param {HTTPMethod} [httpMethod='GET'] - The HTTP method to be used. Defaults to 'GET'.
 * @returns {string} The Strapi endpoint URL corresponding to the given content type and HTTP method.
 * @throws {Error} Throws an error if the endpoint for the given content type and HTTP method is not found.
 *
 * @example
 * // Returns '/api/articles'
 * getStrapiEndpoint('api::article.article');
 *
 * @example
 * // Returns '/api/upload'
 * getStrapiEndpoint('plugin::upload.file', 'POST');
 */
export function getStrapiEndpoint<T extends Common.UID.ContentType>(contentType: T, httpMethod: HTTPMethod = 'GET'): string {

  // Allowed endpoints for GET HTTP method.
  if (httpMethod === 'GET') {
    switch(contentType) {
      // Collection Types
      case 'api::article.article': return '/api/articles';
      case 'api::author.author': return '/api/authors';
      case 'api::category.category': return '/api/categories';
      case 'api::page.page': return '/api/pages';
      case 'api::tag.tag': return '/api/tags';

      // Single Types
      case 'api::frontend-secret.frontend-secret': return '/api/frontend-secret';
      case 'api::backend-secret.backend-secret': return '/api/backend-secret';
      case 'api::site-setting.site-setting': return '/api/site-setting';

      // Plugin Types
      case 'plugin::users-permissions.user': return '/api/users/me';
      case 'plugin::upload.file': return '/api/upload/files';

      default: throw new Error('Strapi endpoint not found for GET HTTP method!');
    }
  }

  // Allowed endpoints for POST HTTP method.
  if (httpMethod === 'POST') {
    switch(contentType) {
      // Plugin Types
      case 'plugin::upload.file': return '/api/upload';

      default: throw new Error('Strapi endpoint not found for POST HTTP method!');
    }
  }

  throw new Error('Strapi endpoint not found!');
}

/**
 * Fetches a collection of items from the Strapi backend for the given content type.
 *
 * @template T - The type of the content type, extending the Common.UID.ContentType type.
 * @param {T} contentType - The unique identifier of the content type.
 * @returns {Promise<APIResponseCollection<T>>} A promise that resolves to a collection of items of the specified content type.
 * @throws {Error} Throws an error if the fetch request fails.
 *
 * @example
 * // Fetches a collection of articles
 * const data = (await fetchMany('api::article.article')) as APIResponseCollection<'api::article.article'>;
 */
export async function fetchMany<T extends Common.UID.ContentType>(contentType: T): Promise<APIResponseCollection<T>> {
  // Build the request URL for Strapi.
  const apiKey = await getAPIKey('frontend');
  const url = new URL(getStrapiEndpoint(contentType), getBackEndURL());
  const options: RequestInit = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`,
    },
  };

  // Add the query params for the request.
  url.search = qs.stringify({ populate: '*', sort: 'createdAt:desc' });

  // Disable Next.js caching in development mode.
  if (getNodeEnv() === 'development') options.cache = 'no-store';

  // Make the request and return it.
  const res = await fetch(url, options);
  if (!res.ok) throw new Error('Failed to fetch data.');
  return res.json();
}
